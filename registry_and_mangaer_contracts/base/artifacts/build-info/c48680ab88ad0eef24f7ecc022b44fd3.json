{
	"id": "c48680ab88ad0eef24f7ecc022b44fd3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"base/OnlyAccountCallable.sol": {
				"content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract OnlyAccountCallable {\r\n    // Errors\r\n    error InvalidSender(address sender);\r\n    error InvalidCalldataLength();\r\n\r\n    /**\r\n     * @notice This modifier checks if caller is an account. This modifier is intended to be used\r\n     *         with functions that update config related to an account e.g., enablePlugin(...).\r\n     *         This modifier is required to ensure that calls for config changes for an account are not\r\n     *         crafted ba a malicious address. For example, if this modifier is not used a malicious address\r\n     *         can call enablePlugin(...) on an account having Manager as a fallback handler, and account will\r\n     *         forward the call to the manager and cannot infer the call is not authoriyed by the account.\r\n     */\r\n    modifier onlyAccount() {\r\n        checkOnlyAccount();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice This function checks if the call to the contract is from an account by comparing\r\n     *         the last 20 bytes of the calldata with the msg.sender.\r\n     *         Based on https://eips.ethereum.org/EIPS/eip-2771.\r\n     */\r\n    function checkOnlyAccount() private view {\r\n        // The check below ensures that the calldata has sender address appended additionally by the caller.\r\n        if (msg.data.length < 20) {\r\n            revert InvalidCalldataLength();\r\n        }\r\n\r\n        // Load last 20 bytes of calldata to load the sender of the message.\r\n        address sender;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n        }\r\n\r\n        if (sender != msg.sender) {\r\n            revert InvalidSender(sender);\r\n        }\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "paris"
		}
	},
	"output": {
		"contracts": {
			"base/OnlyAccountCallable.sol": {
				"OnlyAccountCallable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidCalldataLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "InvalidSender",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidCalldataLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"base/OnlyAccountCallable.sol\":\"OnlyAccountCallable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"base/OnlyAccountCallable.sol\":{\"keccak256\":\"0xe37d616182b4038fa86941100a1f755a53af84aa6011798e6ddace2872b240cf\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://854d7381e348b9381d3b72bc2ee76e2fb609d8a13eadbf32569f969a241a8029\",\"dweb:/ipfs/QmNvpqnjJaB28Fk9VWaDU9uuzyGjMMHVvxCiZC1yvHpz3R\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"base/OnlyAccountCallable.sol": {
				"ast": {
					"absolutePath": "base/OnlyAccountCallable.sol",
					"exportedSymbols": {
						"OnlyAccountCallable": [
							45
						]
					},
					"id": 46,
					"license": "LGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".18"
							],
							"nodeType": "PragmaDirective",
							"src": "43:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "OnlyAccountCallable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 45,
							"linearizedBaseContracts": [
								45
							],
							"name": "OnlyAccountCallable",
							"nameLocation": "89:19:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "4c14f64c",
									"id": 5,
									"name": "InvalidSender",
									"nameLocation": "137:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "159:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 5,
												"src": "151:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "151:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "150:16:0"
									},
									"src": "131:36:0"
								},
								{
									"errorSelector": "ca0ad260",
									"id": 7,
									"name": "InvalidCalldataLength",
									"nameLocation": "179:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "200:2:0"
									},
									"src": "173:30:0"
								},
								{
									"body": {
										"id": 14,
										"nodeType": "Block",
										"src": "883:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 10,
														"name": "checkOnlyAccount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 44,
														"src": "894:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 11,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "894:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 12,
												"nodeType": "ExpressionStatement",
												"src": "894:18:0"
											},
											{
												"id": 13,
												"nodeType": "PlaceholderStatement",
												"src": "923:1:0"
											}
										]
									},
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "211:643:0",
										"text": " @notice This modifier checks if caller is an account. This modifier is intended to be used\n         with functions that update config related to an account e.g., enablePlugin(...).\n         This modifier is required to ensure that calls for config changes for an account are not\n         crafted ba a malicious address. For example, if this modifier is not used a malicious address\n         can call enablePlugin(...) on an account having Manager as a fallback handler, and account will\n         forward the call to the manager and cannot infer the call is not authoriyed by the account."
									},
									"id": 15,
									"name": "onlyAccount",
									"nameLocation": "869:11:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "880:2:0"
									},
									"src": "860:72:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "1233:567:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 19,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1358:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1362:4:0",
															"memberName": "data",
															"nodeType": "MemberAccess",
															"src": "1358:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														"id": 21,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1367:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1358:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3230",
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1376:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_20_by_1",
															"typeString": "int_const 20"
														},
														"value": "20"
													},
													"src": "1358:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 28,
												"nodeType": "IfStatement",
												"src": "1354:83:0",
												"trueBody": {
													"id": 27,
													"nodeType": "Block",
													"src": "1380:57:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 24,
																	"name": "InvalidCalldataLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "1402:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 25,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1402:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 26,
															"nodeType": "RevertStatement",
															"src": "1395:30:0"
														}
													]
												}
											},
											{
												"assignments": [
													30
												],
												"declarations": [
													{
														"constant": false,
														"id": 30,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "1535:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 43,
														"src": "1527:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 29,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1527:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 31,
												"nodeType": "VariableDeclarationStatement",
												"src": "1527:14:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1618:82:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1633:56:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1647:2:0",
																		"type": "",
																		"value": "96"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "calldatasize",
																							"nodeType": "YulIdentifier",
																							"src": "1668:12:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1668:14:0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1684:2:0",
																						"type": "",
																						"value": "20"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1664:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1664:23:0"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "1651:12:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1651:37:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1643:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "1643:46:0"
															},
															"variableNames": [
																{
																	"name": "sender",
																	"nodeType": "YulIdentifier",
																	"src": "1633:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 30,
														"isOffset": false,
														"isSlot": false,
														"src": "1633:6:0",
														"valueSize": 1
													}
												],
												"id": 32,
												"nodeType": "InlineAssembly",
												"src": "1609:91:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 33,
														"name": "sender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "1716:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 34,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1726:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 35,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1730:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1726:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1716:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 42,
												"nodeType": "IfStatement",
												"src": "1712:81:0",
												"trueBody": {
													"id": 41,
													"nodeType": "Block",
													"src": "1738:55:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 38,
																		"name": "sender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 30,
																		"src": "1774:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 37,
																	"name": "InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 5,
																	"src": "1760:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1760:21:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 40,
															"nodeType": "RevertStatement",
															"src": "1753:28:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "940:246:0",
										"text": " @notice This function checks if the call to the contract is from an account by comparing\n         the last 20 bytes of the calldata with the msg.sender.\n         Based on https://eips.ethereum.org/EIPS/eip-2771."
									},
									"id": 44,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkOnlyAccount",
									"nameLocation": "1201:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1217:2:0"
									},
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1233:0:0"
									},
									"scope": 45,
									"src": "1192:608:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 46,
							"src": "71:1732:0",
							"usedErrors": [
								5,
								7
							],
							"usedEvents": []
						}
					],
					"src": "43:1762:0"
				},
				"id": 0
			}
		}
	}
}