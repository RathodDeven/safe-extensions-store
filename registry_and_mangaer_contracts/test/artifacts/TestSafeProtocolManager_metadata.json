{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "registry",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "metadataHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "ActionExecutionFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "ContractDoesNotImplementValidInterfaceId",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					}
				],
				"name": "FunctionHandlerNotSet",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "InvalidPluginAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "InvalidPrevPluginAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "metadataHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "InvalidToFieldInSafeProtocolAction",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "pluginRequires",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "requiredPermission",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "givenPermission",
						"type": "uint8"
					}
				],
				"name": "MissingPluginPermission",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "listedAt",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "flaggedAt",
						"type": "uint64"
					},
					{
						"internalType": "uint8",
						"name": "moduleType",
						"type": "uint8"
					}
				],
				"name": "ModuleNotPermitted",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "PluginAlreadyEnabled",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "PluginNotEnabled",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "requiredPermissions",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "givenPermissions",
						"type": "uint8"
					}
				],
				"name": "PluginPermissionsMismatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "metadataHash",
						"type": "bytes32"
					}
				],
				"name": "RootAccessActionExecutionFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroPageSizeNotAllowed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "metadataHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					}
				],
				"name": "ActionsExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "functionHandler",
						"type": "address"
					}
				],
				"name": "FunctionHandlerChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "hooksAddress",
						"type": "address"
					}
				],
				"name": "HooksChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "PluginDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "permissions",
						"type": "uint8"
					}
				],
				"name": "PluginEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldRegistry",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newRegistry",
						"type": "address"
					}
				],
				"name": "RegistryChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "metadataHash",
						"type": "bytes32"
					}
				],
				"name": "RootAccessActionExecuted",
				"type": "event"
			},
			{
				"stateMutability": "nonpayable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"name": "checkAfterExecution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "checkModuleTransaction",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "moduleTxHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "safeTxGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "baseGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "gasToken",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "refundReceiver",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "msgSender",
						"type": "address"
					}
				],
				"name": "checkTransaction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevPlugin",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "disablePlugin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "permissions",
						"type": "uint8"
					}
				],
				"name": "enablePlugin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "enabledHooks",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "enabledPlugins",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "permissions",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "nextPluginPointer",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address payable",
										"name": "to",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "value",
										"type": "uint256"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct SafeProtocolAction",
								"name": "action",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "metadataHash",
								"type": "bytes32"
							}
						],
						"internalType": "struct SafeRootAccess",
						"name": "rootAccess",
						"type": "tuple"
					}
				],
				"name": "executeRootAccess",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address payable",
										"name": "to",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "value",
										"type": "uint256"
									},
									{
										"internalType": "bytes",
										"name": "data",
										"type": "bytes"
									}
								],
								"internalType": "struct SafeProtocolAction[]",
								"name": "actions",
								"type": "tuple[]"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "metadataHash",
								"type": "bytes32"
							}
						],
						"internalType": "struct SafeTransaction",
						"name": "transaction",
						"type": "tuple"
					}
				],
				"name": "executeTransaction",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"name": "functionHandlers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getEnabledHooks",
				"outputs": [
					{
						"internalType": "address",
						"name": "hooksAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					}
				],
				"name": "getFunctionHandler",
				"outputs": [
					{
						"internalType": "address",
						"name": "functionHandler",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "getPluginInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "permissions",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "nextPluginPointer",
								"type": "address"
							}
						],
						"internalType": "struct SafeProtocolManager.PluginAccessInfo",
						"name": "enabled",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "start",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "getPluginsPaginated",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "array",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "next",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					}
				],
				"name": "isPluginEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registry",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					},
					{
						"internalType": "address",
						"name": "functionHandler",
						"type": "address"
					}
				],
				"name": "setFunctionHandler",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "hooks",
						"type": "address"
					}
				],
				"name": "setHooks",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newRegistry",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "tempHooksData",
				"outputs": [
					{
						"internalType": "address",
						"name": "hooksAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "preCheckData",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testFunction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"checkAfterExecution(bytes32,bool)": {
					"params": {
						"success": "bool"
					}
				},
				"checkModuleTransaction(address,uint256,bytes,uint8,address)": {
					"params": {
						"data": "The transaction data.",
						"module": "The module involved in the transaction.",
						"operation": "The type of operation of the transaction.",
						"to": "The address to which the transaction is intended.",
						"value": "The value of the transaction in Wei."
					},
					"returns": {
						"moduleTxHash": "The hash of the module transaction."
					}
				},
				"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": {
					"details": "An account must enable SafeProtocolManager as a Guard (for Safe v1.x) and enable a contract address as Hooks.      If there is no hooks enabled for the Safe, transaction will pass through without any checks.",
					"params": {
						"baseGas": "uint256",
						"data": "Artibtrary length bytes containing payload",
						"gasPrice": "uint256",
						"gasToken": "address",
						"msgSender": "Sender of the transaction",
						"operation": "Call or DelegateCall operation",
						"refundReceiver": "payable address",
						"safeTxGas": "uint256",
						"signatures": "Arbitrary bytes containing ECDSA signatures",
						"to": "address of the account",
						"value": "Amount of ETH to be sent"
					}
				},
				"disablePlugin(address,address)": {
					"params": {
						"plugin": "Plugin to be disabled"
					}
				},
				"enablePlugin(address,uint8)": {
					"params": {
						"permissions": "uint8 indicating permissions granted to the plugin.",
						"plugin": "ISafeProtocolPlugin A plugin that has to be enabled"
					}
				},
				"executeRootAccess(address,((address,uint256,bytes),uint256,bytes32))": {
					"params": {
						"account": "Target account address",
						"rootAccess": "A struct of type SafeRootAccess containing information of about the action to be executed.                   Users can add logic to validate metadataHash through hooks."
					},
					"returns": {
						"data": "bytes types containing the result of the executed action."
					}
				},
				"executeTransaction(address,((address,uint256,bytes)[],uint256,bytes32))": {
					"details": "Restrict the `to` field in the actions so that a module cannot execute an action that changes the config such as      enabling/disabling other modules or make changes to its own access level for an account.      In future, evaluate use of fine granined permissions model executing actions.      For more information, follow the disuccsion here: https://github.com/safe-global/safe-protocol-specs/discussions/7.",
					"params": {
						"account": "Target account address",
						"transaction": "A struct of type SafeTransaction containing information of about the action(s) to be executed.                    Users can add logic to validate metadataHash through hooks."
					},
					"returns": {
						"data": "bytes types containing the result of the executed action."
					}
				},
				"getEnabledHooks(address)": {
					"params": {
						"account": "Address of an account"
					},
					"returns": {
						"hooksAddress": "Address of hooks enabled for the account"
					}
				},
				"getFunctionHandler(address,bytes4)": {
					"params": {
						"account": "Address of an account",
						"selector": "bytes4 function selector"
					},
					"returns": {
						"functionHandler": "Address of the contract to be set as a function handler"
					}
				},
				"getPluginInfo(address,address)": {
					"params": {
						"account": "Address of an account",
						"plugin": "Address of a plugin"
					}
				},
				"getPluginsPaginated(address,uint256,address)": {
					"params": {
						"pageSize": "Maximum number of plugins that should be returned. Has to be > 0",
						"start": "Start of the page. Has to be a plugin or start pointer (0x1 address)"
					},
					"returns": {
						"array": "Array of plugins.",
						"next": "Start of the next page."
					}
				},
				"isPluginEnabled(address,address)": {
					"params": {
						"account": "Address of an account",
						"plugin": "Address of a plugin"
					},
					"returns": {
						"_0": "True if the plugin is enabled"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setFunctionHandler(bytes4,address)": {
					"params": {
						"functionHandler": "Address of the contract to be set as a function handler",
						"selector": "bytes4 function selector"
					}
				},
				"setHooks(address)": {
					"params": {
						"hooks": "Address of the hooks to be enabled for msg.sender."
					}
				},
				"setRegistry(address)": {
					"params": {
						"newRegistry": "Address of new registry"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
				}
			},
			"title": "This is a test version of SafeProtocolManager and should use TestSafeProtocolRegistryUnrestricted contract as resgistry.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"checkAfterExecution(bytes32,bool)": {
					"notice": "Implement BaseGuard interface to allow Safe to add Manager as a guard for existing Safe accounts (upto version 1.5.x)."
				},
				"checkModuleTransaction(address,uint256,bytes,uint8,address)": {
					"notice": "This function is introduced in Safe contracts v1.5 and used for checking module transactions when a guard is enabled.         This function will be called when executing a transaction from a module with Safe v1.5 and Manager enabled as Guard on Safe."
				},
				"checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": {
					"notice": "Implement BaseGuard interface to allow an account to add Manager as a guard for existing Safe accounts (upto version 1.5.x)."
				},
				"disablePlugin(address,address)": {
					"notice": "Disable a plugin. This function should be called by account."
				},
				"enablePlugin(address,uint8)": {
					"notice": "Enables a plugin for an account. Must be called by the account."
				},
				"enabledPlugins(address,address)": {
					"notice": "Mapping of a mapping what stores information about plugins that are enabled per account.         address (Account address) => address (module address) => EnabledPluginInfo"
				},
				"executeRootAccess(address,((address,uint256,bytes),uint256,bytes32))": {
					"notice": "This function executes a delegate call on an account if the plugin is enabled and         the root access is granted."
				},
				"executeTransaction(address,((address,uint256,bytes)[],uint256,bytes32))": {
					"notice": "This function executes non-delegate call(s) on an account if the plugin is enabled for the Account.         If any one of the actions fail, the transaction reverts."
				},
				"getEnabledHooks(address)": {
					"notice": "Returns the address of hooks for an account provided as a function parameter.         Returns address(0) is no hooks are enabled."
				},
				"getFunctionHandler(address,bytes4)": {
					"notice": "Returns the function handler for an account and function selector."
				},
				"getPluginInfo(address,address)": {
					"notice": "A view only function to get information about an account and a plugin"
				},
				"getPluginsPaginated(address,uint256,address)": {
					"notice": "Returns an array of plugins enabled for an account address.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."
				},
				"isPluginEnabled(address,address)": {
					"notice": "Returns if an plugin is enabled"
				},
				"setFunctionHandler(bytes4,address)": {
					"notice": "Sets the function handler for an account and function selector. The msg.sender must be the account.         This function checks if the functionHandler address is listed and not flagged in the registry."
				},
				"setHooks(address)": {
					"notice": "Sets hooks on an account. If Zero address is set, manager will not perform pre and post checks for account transactions."
				},
				"setRegistry(address)": {
					"notice": "Allows only owner to update the address of a registry. Emits event RegistryChanged(egistry, newRegistry)"
				},
				"tempHooksData(address)": {
					"notice": "This variable should store the address of the hooks contract whenever checkTransaction(...) is called and use it in checkAfterExecution(...) to avoid any side effects of changed hooks address inbetween transaction."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"test/TestSafeProtocolManager.sol": "TestSafeProtocolManager"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"DataTypes.sol": {
			"keccak256": "0xba96a56684fa0731bb1553f865b156083c24abaeb3212d4704aaf5a76f36ba6b",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://fb9136ce85f8f5ea65d12c09ba433486afd10c23951ccfb583456a24831a6c6c",
				"dweb:/ipfs/QmfD95cswa47jGrmhDb2yrTEcGM5RLkESxWCZHMGiXYPe3"
			]
		},
		"SafeProtocolManager.sol": {
			"keccak256": "0xe000c3a6925c80e7684f622bdd13da4ea7853e88635d6e02e568083c073d5b61",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://a96db76170fce6e7578bd1878c8f9c5a1e7b04c43061fc61cdc0b9158cc47554",
				"dweb:/ipfs/QmQZgqs3zr37JxGHzfAyFNyoqxhzCozqj74RGSBhAnfTe4"
			]
		},
		"base/FunctionHandlerManager.sol": {
			"keccak256": "0x24a538db63676c9d74f43fa6e5360597e3b84f2b32dff7e7b1c1bd4feadff0d3",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://525cf82e64ca8787e4c7b8835226babb7a4aa41a828de7e1e1fb3ac8cfd35c3a",
				"dweb:/ipfs/QmRQmrbGVvTxYbGH865yo3dC34woh1kBLG7njKxLbWHPKz"
			]
		},
		"base/HooksManager.sol": {
			"keccak256": "0x20b9d28b6a651acbf6f9aeffb160746db5a0cb126a145a0e7800af40d5440876",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://d0f7ca9ded9468a99c73207eb25783da6181354e7139f4ea6595e87b33c701cb",
				"dweb:/ipfs/QmbJBT5J43td2cXLPqQ6MzCTTao3dJrPiQc7QvzWDPMiju"
			]
		},
		"base/RegistryManager.sol": {
			"keccak256": "0x0a0b390bc06affac3661d6939d6b1bb1be239641b6f0b882dd1d747c548f4f4f",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://b960f3a8eab7777086bc53494cc70be1f625e6e7a547c1540205b5e98a810a2a",
				"dweb:/ipfs/QmPcD3KZaKqHA3cpcUWCcSZNiggJnj8musiDhaFweXRF9o"
			]
		},
		"common/Constants.sol": {
			"keccak256": "0x29117901074b212304c9caa729efdf5ce5c2017c482e40560316fb0e65cd7eef",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://38043931eb6281dd49e13767fca8484a29738969702a1e194998d7a4a7abb3ef",
				"dweb:/ipfs/QmQZLt2DTCeRoz3JXhRpGNiSFr88ogsGXREgniW272pHGs"
			]
		},
		"common/Enum.sol": {
			"keccak256": "0xce8d9443688c27d538ac8bc768ef13eadaaffd90b47603995ae60f26f48a3969",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://6f43dfad8a1cd06d16b26e12dfea50fe89265e069e795c5e2bcdc1a382234e73",
				"dweb:/ipfs/QmXpEVLoCfKtyNRRnSfrohtqw1s5ocXbKwVxKNSv937fbK"
			]
		},
		"interfaces/Accounts.sol": {
			"keccak256": "0x9350dccaebae739a2d562bec10772de6ece402613b44decefbde87c7d4a1238b",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://0b8571c85963b6bc2f3a18b9201fc75b6b0560f85cfdb97b003f7ac13fff88ea",
				"dweb:/ipfs/QmZYJGAEV4ypBBbwCYw3387fRKFrwHfFCUFbXJE8H4kR3a"
			]
		},
		"interfaces/Manager.sol": {
			"keccak256": "0xce7ef18d9e4f2a176649abd6c294a167cdef6c1da59d08585614c251ee119995",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://9ec23c18316fd6429dc6571c9279a22ca5d80ccca91649b05e580ec10cf05ead",
				"dweb:/ipfs/QmR1sSCkZVLaJUC69AnhjCTqR2ZbP9x89J4Eh9KENs9L5C"
			]
		},
		"interfaces/Modules.sol": {
			"keccak256": "0xd4604a7eb7642d5786e5a6afc4cf37f5b179a8f95a27d1cd0e0972f6894f2eb8",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://c1558203c5a97a11ebe1df26a305aa708adb5f88dca0e4d942fa4ff615a61067",
				"dweb:/ipfs/QmPHpQbDM2rnVkqcRA6Pp2odLckZwAq13hFKSbWS5ZaQoV"
			]
		},
		"interfaces/Registry.sol": {
			"keccak256": "0x866dde6d6df847f704e0474ceb67b8f006dc9da95317e284e70e8d9378cf8d23",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://7b19a60ded218ec719b3df68995121c3d117e620180e18107cac2316a9c29dcb",
				"dweb:/ipfs/QmY6uRhT3S18BtVDSmo8NmiKzAWu6r2MpuGMaByXSQRH4F"
			]
		},
		"ownable/Context.sol": {
			"keccak256": "0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94",
			"license": "MIT",
			"urls": [
				"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2",
				"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn"
			]
		},
		"ownable/Ownable.sol": {
			"keccak256": "0x673b1da37f2744f44a9deb6a48a75634f35acb19cca8802ff92df829e381b0ed",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e33fb87c6b3d834d9c884d96f9afb2259b765e1a31cec90bc1808e0a57e98d9",
				"dweb:/ipfs/Qmct4JbYxL1HEDQ6odktWtNUsRC6jxx6eDmbmuSpnVspZs"
			]
		},
		"ownable/Ownable2Step.sol": {
			"keccak256": "0x2dea0183b9f457f9827b30a5c07797252fe348a52b7bb65b3391c6a3ae9f159a",
			"license": "MIT",
			"urls": [
				"bzz-raw://32647c7ad298438546cdedb9d16827fd1616a19717189cd580c76252c17c2632",
				"dweb:/ipfs/QmXdTR2C8uGedwnaZi81gKRc6rU8fpC4oAmSPLMHSrn96c"
			]
		},
		"test/TestSafeProtocolManager.sol": {
			"keccak256": "0xd6b868f1cfcd35a5647d4f02bc2b8a09fb050581f46ce4e6d43b5735a5c3ec4b",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://dde1f910ab3f5689dd30e593ee224a02f5092a5a88b58ea3cef1ce8375d526f9",
				"dweb:/ipfs/QmZqMtqTHLCnMh9579MKi4E84oQ22S7a7NRqWbUtNNnTd5"
			]
		}
	},
	"version": 1
}