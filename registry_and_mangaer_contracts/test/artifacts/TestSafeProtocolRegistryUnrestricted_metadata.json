{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "moduleTypes",
						"type": "uint8"
					}
				],
				"name": "CannotAddModule",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "CannotFlagModule",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "expectedInterfaceId",
						"type": "bytes4"
					}
				],
				"name": "ModuleDoesNotSupportExpectedInterfaceId",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "ModuleAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "ModuleFlagged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "moduleType",
						"type": "uint8"
					}
				],
				"name": "addModule",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "data",
						"type": "bytes32"
					}
				],
				"name": "check",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "listedAt",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "flaggedAt",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "flagModule",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "listedModules",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "listedAt",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "flaggedAt",
						"type": "uint64"
					},
					{
						"internalType": "uint8",
						"name": "moduleTypes",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"addModule(address,uint8)": {
					"params": {
						"module": "Address of the module",
						"moduleType": "Enum.ModuleType indicating the type of module"
					}
				},
				"check(address,bytes32)": {
					"params": {
						"module": "Address of the module to be checked"
					},
					"returns": {
						"flaggedAt": "Timestamp of falgging the module. This value will be 0 if not flagged.",
						"listedAt": "Timestamp of listing the module. This value will be 0 if not listed."
					}
				},
				"flagModule(address)": {
					"params": {
						"module": "Address of the module"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
				}
			},
			"title": "This is a test version of SafeProtocolRegistry that does not restrict any account from adding Modules.        This contract is only for testing purposes and not meant for production use.        The onlyOwner function modifier of `addModule(address,Enum.ModuleType)` has been removed to allow        developers to add any Module to the resgistry.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addModule(address,uint8)": {
					"notice": "Allows any account to add a module. A module can be any address including zero address for now.         This function does not permit adding a module twice. This function validates if module supports expected interfaceId."
				},
				"check(address,bytes32)": {
					"notice": "This function returns information about a module"
				},
				"flagModule(address)": {
					"notice": "Allows only owner to flad a module. Only previously added module can be flagged.         This function does not permit flagging a module twice.         A module can be any address including zero address for now."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"test/TestSafeProtocolRegistryUnrestricted.sol": "TestSafeProtocolRegistryUnrestricted"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"DataTypes.sol": {
			"keccak256": "0xba96a56684fa0731bb1553f865b156083c24abaeb3212d4704aaf5a76f36ba6b",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://fb9136ce85f8f5ea65d12c09ba433486afd10c23951ccfb583456a24831a6c6c",
				"dweb:/ipfs/QmfD95cswa47jGrmhDb2yrTEcGM5RLkESxWCZHMGiXYPe3"
			]
		},
		"SafeProtocolRegistry.sol": {
			"keccak256": "0xf3811eebfa9a732556ee40951e372ec5bcb80d5db3ab327e1a49558ca69e65e0",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://823c75146210e4e24e1fd2e44d15e298d71c8e57163bd1b49a566fe7713207df",
				"dweb:/ipfs/QmbGt6UHaPdthEMF42GxHBka6CgQZsLJXJbsfwyvUsWf84"
			]
		},
		"common/Constants.sol": {
			"keccak256": "0x29117901074b212304c9caa729efdf5ce5c2017c482e40560316fb0e65cd7eef",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://38043931eb6281dd49e13767fca8484a29738969702a1e194998d7a4a7abb3ef",
				"dweb:/ipfs/QmQZLt2DTCeRoz3JXhRpGNiSFr88ogsGXREgniW272pHGs"
			]
		},
		"common/Enum.sol": {
			"keccak256": "0xce8d9443688c27d538ac8bc768ef13eadaaffd90b47603995ae60f26f48a3969",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://6f43dfad8a1cd06d16b26e12dfea50fe89265e069e795c5e2bcdc1a382234e73",
				"dweb:/ipfs/QmXpEVLoCfKtyNRRnSfrohtqw1s5ocXbKwVxKNSv937fbK"
			]
		},
		"interfaces/Modules.sol": {
			"keccak256": "0xd4604a7eb7642d5786e5a6afc4cf37f5b179a8f95a27d1cd0e0972f6894f2eb8",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://c1558203c5a97a11ebe1df26a305aa708adb5f88dca0e4d942fa4ff615a61067",
				"dweb:/ipfs/QmPHpQbDM2rnVkqcRA6Pp2odLckZwAq13hFKSbWS5ZaQoV"
			]
		},
		"interfaces/Registry.sol": {
			"keccak256": "0x866dde6d6df847f704e0474ceb67b8f006dc9da95317e284e70e8d9378cf8d23",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://7b19a60ded218ec719b3df68995121c3d117e620180e18107cac2316a9c29dcb",
				"dweb:/ipfs/QmY6uRhT3S18BtVDSmo8NmiKzAWu6r2MpuGMaByXSQRH4F"
			]
		},
		"ownable/Context.sol": {
			"keccak256": "0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94",
			"license": "MIT",
			"urls": [
				"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2",
				"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn"
			]
		},
		"ownable/Ownable.sol": {
			"keccak256": "0x673b1da37f2744f44a9deb6a48a75634f35acb19cca8802ff92df829e381b0ed",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e33fb87c6b3d834d9c884d96f9afb2259b765e1a31cec90bc1808e0a57e98d9",
				"dweb:/ipfs/Qmct4JbYxL1HEDQ6odktWtNUsRC6jxx6eDmbmuSpnVspZs"
			]
		},
		"ownable/Ownable2Step.sol": {
			"keccak256": "0x2dea0183b9f457f9827b30a5c07797252fe348a52b7bb65b3391c6a3ae9f159a",
			"license": "MIT",
			"urls": [
				"bzz-raw://32647c7ad298438546cdedb9d16827fd1616a19717189cd580c76252c17c2632",
				"dweb:/ipfs/QmXdTR2C8uGedwnaZi81gKRc6rU8fpC4oAmSPLMHSrn96c"
			]
		},
		"test/TestSafeProtocolRegistryUnrestricted.sol": {
			"keccak256": "0xa3688d155eb977abe9968fec4de00cc54e48496be0d3d69ea9b62a3eb1796026",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://88e88c0515f5958c0e6cecb4ee129c2230ca200320980a3449ae1de5e39e366b",
				"dweb:/ipfs/QmUVAua9wWt16duiujeduYLyLHvS5CHoozV2Uy3V34H2P4"
			]
		}
	},
	"version": 1
}